openapi: 3.0.1
info:
  description: Microsoft.Shennong.CommonService.FileAPI
  version: '2.0'
  title: FileAPI
servers:
  - url: 'https://mpstorage-int.chinacloudsites.cn'
    description: v2.0 Gallatin
  - url: 'https://ww-fileapi-int.azurewebsites.net'
    description: v2.0 WorldWide
  - url: 'https://localhost:44390'
    description: Local Debug
tags:
- name: upload
  description: Upload a file to storage
- name: download
  description: Download a file from storage
- name: children
  description: Get the file list of the children of a folder
- name: delete
  description: Delete a file from fstorage
- name: publication
  description: Publish and copy from user's storage
security:
- headerBearer: []
- headerToken: []
- queryToken: []
paths:
  /v2.0/storage/me/{storageType}/{filePath}/upload:
    post:
      tags:
      - upload
      summary: Upload a file to storage
      parameters:
      - in: path
        name: storageType
        description: The Storage to upload file to
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: filePath
        description: base64 url encoded filePath
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Data of the file
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: Meta info of the uploaded file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadResult'
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/{filePath}/uploadurl:
    post:
      tags:
      - get a client upload url
      summary: get a client url to Upload a file to storage
      parameters:
      - in: path
        name: storageType
        description: The Storage to upload file to
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: filePath
        description: base64 url encoded filePath
        required: true
        schema:
          type: string
          format: byte
      requestBody:
        description: Data of the file
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: Meta info of the uploaded file url
          content:
            application/json:
              schema:
                type:string
                format:binary
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/items/{fileId}/content:
    get:
      tags:
      - download
      summary: Download a file from storage
      parameters:
      - in: path
        name: storageType
        description: The Storage to download file from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of an item in storage
        required: true
        schema:
          type: string
          format: byte
      - in: query
        name: allowRedirect
        description: If allow redirect the download request to storage service source.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: The data of the downloaded file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/items/{fileId}/downloadurl:
    get:
      tags:
      - download url
      summary: get a download url for  file from storage
      parameters:
      - in: path
        name: storageType
        description: The Storage to download file from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of an item in storage
        required: true
        schema:
          type: string
          format: byte
      responses:
        200:
          description: The data of the downloaded file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/children:
    get:
      tags:
      - children
      summary: Get files in the root folder
      parameters:
      - in: path
        name: storageType
        description: The Storage to get children files from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      responses:
        200:
          description: File list result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/childrenResult'
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/items/{fileId}/children:
    get:
      tags:
      - children
      summary: Get files in the folder that fileId specifies
      parameters:
      - in: path
        name: storageType
        description: The Storage to get children files from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of a folder
        required: true
        schema:
          type: string
      responses:
        200:
          description: File list result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/childrenResult'
        201:
          description: Unauthorized
    post:
      tags:
      - create folder
      summary: create a folder
      parameters:
      - in: path
        name: storageType
        description: The Storage to get children files from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of a folder
        required: true
        schema:
          type: string
      - in: query
        name: folderName
        description: The name of child folder
        required: true
        schema:
          type: string
      responses:
        200:
          description: File metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/childrenResult'
        201:
          description: Unauthorized
  /v2.0/storage/me/{storageType}/items/{fileId}/meta:
    get:
      tags:
      - metadata
      summary: Get item metadata
      parameters:
      - in: path
        name: storageType
        description: The Storage to get children files from
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of a folder
        required: true
        schema:
          type: string
      responses:
        200:
          description: File metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/childrenResult'
        201:
          description: Unauthorized
  
  /v2.0/storage/me/{storageType}/items/{fileId}:
    delete:
      tags:
      - delete
      summary: Delete a file
      parameters:
      - in: path
        name: storageType
        description: The Storage that file to delete belongs to
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: path
        name: fileId
        description: The fileId of a folder
        required: true
        schema:
          type: string
      responses:
        200:
          description: Delete result
          content:
            application/json:
              schema:
                type: bool
        201:
          description: Unauthorized
  /v2.0/storage/share:
    post:
      tags:
      - share 
      summary: share a file or folder
      parameters:
      - in: path
        name: storageType
        description: The Storage that file to delete belongs to
        required: true
        schema:
          $ref: '#/components/schemas/storageType'
      - in: body
        name: shareCodeRequest
        description: share request body
        required: true
        schema:
          $ref: '#/components/schemas/ShareCodeRequest'
      responses:
        200:
          description: share code 
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ShareResult'
        201:
          description: Unauthorized
  /v2.0/storage/{storageType}/{filePath}/publish:
    post:
      tags:
        - publication
      description: create a publication from a file/folder specified by the {storageType}/{filePath}. 
      parameters:
        - name: storageType
          in: path
          required: true
          schema: 
            $ref: '#/components/schemas/storageType'
        - name: filePath
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publishResult'
        403:
          description: published files total size limit exceeded.
        404:
          description: target folder/file not found. 
  /v2.0/storage/{storageType}/items/{fileId}/publish:
    post:
      tags:
        - publication
      description: create a publication from a file/folder specified by the fileId.
      parameters:
        - name: storageType
          in: path
          required: true
          schema: 
            $ref: '#/components/schemas/storageType'
        - name: fileId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publishResult'
        403:
          description: published files total size limit exceeded.
        404:
          description: target folder/file not found. 
  /v2.0/publications/{publicationId}:
    get:
      tags:
        - publication
      parameters:
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#components/schemas/publication'
    delete:
      tags:
        - publication
      description: delete a publication, owner only operation.
      parameters:
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: deleted
        404:
          description: publication not found.
  /v2.0/publications/{publicationId}/copy:
    post:
      tags:
        - publication
      description: copy a published file/folder to user's own storage, a monitor would be returned to track the status of the copy operation.
      parameters:
        - name: publicationId
          in: path
          required: true
          schema:
            type: string
        - name: requestBody
          in: body
          required: true
          schema:
            type: object
            properties:
              destFileId:
                type: string
              acceptOriginalFiles:
                type: boolean
      responses:
        202:
          content:
            application/json:
              schema:
                type: object
                properties:
                  monitorId:
                    type: string
        403:
          description: destination size not enough.
        404:
          description: publication not found

  /v2.0/monitors/{monitorId}:
    get:
      security: 
        - anonymous
      parameters:
        - name: monitorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#components/schemas/monitor'
components:
  # Authorization Methods
  securitySchemes:
    headerBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    headerToken:
      type: apiKey
      name: token
      in: header
    queryToken:
      type: apiKey
      name: token
      in: query
  # Request/Response datas.
  schemas:
    #### Request parameters.
    storageType:
      type: string
      enum:
        - PrivateBlob
        - TempBlob
        - PublicBlob
        - OneDrive
        - OFB
        - DGStorage
    ShareType:
      type: string
      enum:
        - File
        - Folder
        - FileList
    SharePermission:
      type: string
      enum:
        - Read
        - Write
        - None
    #### Responses
    monitor:
      type: object
      properties:
        status:
          type: string
          enum:
            - notStarted
            - inProcess
            - completed
            - failed
        percentage:
          type: number
        operation:
          type: string
        result:
          type: object
        description:
          type: string
    publication:
      type: object
      properties:
        authorId: 
          type: string
        createdTimestamp:
          type: string
          format: date-time
        size:
          type: number
        children:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
              size:
                type: number
    publishResult:
      type: object
      properties:
        publicationId:
          type: string
    uploadResult:
      type: object
      properties:
        ## Common properties
        fileName:
          type: string
        fileId:
          type: string
        fileSize:
          type: string
        lastModifiedTime:
          type: date-time
        downloadUrl:
          type: string
        storageType:
          $ref: '#/components/schemas/storageType'
        parentPath:
          type: string
        ## DGStorage only
        filePath:
          type: string
        ## v1.0 compatibility
        driveId:
          type: string
        itemType:
          type: string
        createTimeTicks:
          type: integer
          format: int64
        UpdateTimeTicks:
          type: int64
          format: int64
    childrenResult:
      type: array
      items:
        $ref: '#/components/schemas/uploadResult'
    ShareCodeRequest:
      type: object
      properties:
        FromUser: 
          type: string
        StorageType:
          $ref: '#/components/schemas/storageType'
        ShareType:
          $ref: '#/components/schemas/ShareType'
        Permission:
          $ref: '#/components/schemas/SharePermission'
        Items:
          type: array
          items:
          $ref: '#/components/schemas/ToShareItem'
    ToShareItem:
      type: object
      properties:
        FileId:
          type: string
        FilePath:
          type: string
        BlobUrl:
          type: string
    ShareResult:
      type: object
      properties:
        Success:
          type: bool
        ShareCode:
          type: string